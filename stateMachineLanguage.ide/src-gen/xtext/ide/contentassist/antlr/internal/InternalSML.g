/*
 * generated by Xtext 2.25.0
 */
grammar InternalSML;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.services.SMLGrammarAccess;

}
@parser::members {
	private SMLGrammarAccess grammarAccess;

	public void setGrammarAccess(SMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSML
entryRuleSML
:
{ before(grammarAccess.getSMLRule()); }
	 ruleSML
{ after(grammarAccess.getSMLRule()); } 
	 EOF 
;

// Rule SML
ruleSML 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSMLAccess().getSmlAssignment()); }
		(rule__SML__SmlAssignment)
		{ after(grammarAccess.getSMLAccess().getSmlAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArchitecture
entryRuleArchitecture
:
{ before(grammarAccess.getArchitectureRule()); }
	 ruleArchitecture
{ after(grammarAccess.getArchitectureRule()); } 
	 EOF 
;

// Rule Architecture
ruleArchitecture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchitectureAccess().getGroup()); }
		(rule__Architecture__Group__0)
		{ after(grammarAccess.getArchitectureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropout
entryRuleDropout
:
{ before(grammarAccess.getDropoutRule()); }
	 ruleDropout
{ after(grammarAccess.getDropoutRule()); } 
	 EOF 
;

// Rule Dropout
ruleDropout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropoutAccess().getDropoutKeyword()); }
		'dropout'
		{ after(grammarAccess.getDropoutAccess().getDropoutKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePooling
entryRulePooling
:
{ before(grammarAccess.getPoolingRule()); }
	 rulePooling
{ after(grammarAccess.getPoolingRule()); } 
	 EOF 
;

// Rule Pooling
rulePooling 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPoolingAccess().getAlternatives()); }
		(rule__Pooling__Alternatives)
		{ after(grammarAccess.getPoolingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvolution
entryRuleConvolution
:
{ before(grammarAccess.getConvolutionRule()); }
	 ruleConvolution
{ after(grammarAccess.getConvolutionRule()); } 
	 EOF 
;

// Rule Convolution
ruleConvolution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvolutionAccess().getAlternatives()); }
		(rule__Convolution__Alternatives)
		{ after(grammarAccess.getConvolutionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalPooling
entryRuleGlobalPooling
:
{ before(grammarAccess.getGlobalPoolingRule()); }
	 ruleGlobalPooling
{ after(grammarAccess.getGlobalPoolingRule()); } 
	 EOF 
;

// Rule GlobalPooling
ruleGlobalPooling 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getAlternatives()); }
		(rule__GlobalPooling__Alternatives)
		{ after(grammarAccess.getGlobalPoolingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlattenOrGlobal
entryRuleFlattenOrGlobal
:
{ before(grammarAccess.getFlattenOrGlobalRule()); }
	 ruleFlattenOrGlobal
{ after(grammarAccess.getFlattenOrGlobalRule()); } 
	 EOF 
;

// Rule FlattenOrGlobal
ruleFlattenOrGlobal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getAlternatives()); }
		(rule__FlattenOrGlobal__Alternatives)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterstice
entryRuleInterstice
:
{ before(grammarAccess.getIntersticeRule()); }
	 ruleInterstice
{ after(grammarAccess.getIntersticeRule()); } 
	 EOF 
;

// Rule Interstice
ruleInterstice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntersticeAccess().getFgAssignment()); }
		(rule__Interstice__FgAssignment)
		{ after(grammarAccess.getIntersticeAccess().getFgAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassification
entryRuleClassification
:
{ before(grammarAccess.getClassificationRule()); }
	 ruleClassification
{ after(grammarAccess.getClassificationRule()); } 
	 EOF 
;

// Rule Classification
ruleClassification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassificationAccess().getGroup()); }
		(rule__Classification__Group__0)
		{ after(grammarAccess.getClassificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvDrop
entryRuleConvDrop
:
{ before(grammarAccess.getConvDropRule()); }
	 ruleConvDrop
{ after(grammarAccess.getConvDropRule()); } 
	 EOF 
;

// Rule ConvDrop
ruleConvDrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvDropAccess().getGroup()); }
		(rule__ConvDrop__Group__0)
		{ after(grammarAccess.getConvDropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeConv
entryRuleMergeConv
:
{ before(grammarAccess.getMergeConvRule()); }
	 ruleMergeConv
{ after(grammarAccess.getMergeConvRule()); } 
	 EOF 
;

// Rule MergeConv
ruleMergeConv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeConvAccess().getGroup()); }
		(rule__MergeConv__Group__0)
		{ after(grammarAccess.getMergeConvAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvOrMerge
entryRuleConvOrMerge
:
{ before(grammarAccess.getConvOrMergeRule()); }
	 ruleConvOrMerge
{ after(grammarAccess.getConvOrMergeRule()); } 
	 EOF 
;

// Rule ConvOrMerge
ruleConvOrMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvOrMergeAccess().getAlternatives()); }
		(rule__ConvOrMerge__Alternatives)
		{ after(grammarAccess.getConvOrMergeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getAlternatives()); }
		(rule__Right__Alternatives)
		{ after(grammarAccess.getRightAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeBody
entryRuleMergeBody
:
{ before(grammarAccess.getMergeBodyRule()); }
	 ruleMergeBody
{ after(grammarAccess.getMergeBodyRule()); } 
	 EOF 
;

// Rule MergeBody
ruleMergeBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeBodyAccess().getGroup()); }
		(rule__MergeBody__Group__0)
		{ after(grammarAccess.getMergeBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMerge
entryRuleMerge
:
{ before(grammarAccess.getMergeRule()); }
	 ruleMerge
{ after(grammarAccess.getMergeRule()); } 
	 EOF 
;

// Rule Merge
ruleMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeAccess().getGroup()); }
		(rule__Merge__Group__0)
		{ after(grammarAccess.getMergeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureExtraction
entryRuleFeatureExtraction
:
{ before(grammarAccess.getFeatureExtractionRule()); }
	 ruleFeatureExtraction
{ after(grammarAccess.getFeatureExtractionRule()); } 
	 EOF 
;

// Rule FeatureExtraction
ruleFeatureExtraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getGroup()); }
		(rule__FeatureExtraction__Group__0)
		{ after(grammarAccess.getFeatureExtractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pooling__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoolingAccess().getAvg_poolingKeyword_0()); }
		'avg_pooling'
		{ after(grammarAccess.getPoolingAccess().getAvg_poolingKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPoolingAccess().getMax_poolingKeyword_1()); }
		'max_pooling'
		{ after(grammarAccess.getPoolingAccess().getMax_poolingKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getBnconvAssignment_0()); }
		(rule__Convolution__BnconvAssignment_0)
		{ after(grammarAccess.getConvolutionAccess().getBnconvAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getConvbnAssignment_1()); }
		(rule__Convolution__ConvbnAssignment_1)
		{ after(grammarAccess.getConvolutionAccess().getConvbnAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getConvAssignment_2()); }
		(rule__Convolution__ConvAssignment_2)
		{ after(grammarAccess.getConvolutionAccess().getConvAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getUpconvAssignment_3()); }
		(rule__Convolution__UpconvAssignment_3)
		{ after(grammarAccess.getConvolutionAccess().getUpconvAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPooling__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getGlobal_avg_poolingKeyword_0()); }
		'global_avg_pooling'
		{ after(grammarAccess.getGlobalPoolingAccess().getGlobal_avg_poolingKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getGlobal_max_poolingKeyword_1()); }
		'global_max_pooling'
		{ after(grammarAccess.getGlobalPoolingAccess().getGlobal_max_poolingKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatAssignment_0()); }
		(rule__FlattenOrGlobal__FlatAssignment_0)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getGpAssignment_1()); }
		(rule__FlattenOrGlobal__GpAssignment_1)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getGpAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_0()); }
			(rule__ConvOrMerge__ConvdropAssignment_0)
			{ after(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_0()); }
		)
		(
			{ before(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_0()); }
			(rule__ConvOrMerge__ConvdropAssignment_0)*
			{ after(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getConvOrMergeAccess().getGroup_1()); }
		(rule__ConvOrMerge__Group_1__0)
		{ after(grammarAccess.getConvOrMergeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getRightAccess().getConvAssignment_0()); }
			(rule__Right__ConvAssignment_0)
			{ after(grammarAccess.getRightAccess().getConvAssignment_0()); }
		)
		(
			{ before(grammarAccess.getRightAccess().getConvAssignment_0()); }
			(rule__Right__ConvAssignment_0)*
			{ after(grammarAccess.getRightAccess().getConvAssignment_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getRightAccess().getGroup_1()); }
		(rule__Right__Group_1__0)
		{ after(grammarAccess.getRightAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getConvAssignment_0_0()); }
		(rule__FeatureExtraction__ConvAssignment_0_0)
		{ after(grammarAccess.getFeatureExtractionAccess().getConvAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getMergeAssignment_0_1()); }
		(rule__FeatureExtraction__MergeAssignment_0_1)
		{ after(grammarAccess.getFeatureExtractionAccess().getMergeAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__0__Impl
	rule__Architecture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getInputAssignment_0()); }
	(rule__Architecture__InputAssignment_0)
	{ after(grammarAccess.getArchitectureAccess().getInputAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__1__Impl
	rule__Architecture__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
		(rule__Architecture__FeAssignment_1)
		{ after(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
	)
	(
		{ before(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
		(rule__Architecture__FeAssignment_1)*
		{ after(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__2__Impl
	rule__Architecture__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getGroup_2()); }
	(rule__Architecture__Group_2__0)?
	{ after(grammarAccess.getArchitectureAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getOutputAssignment_3()); }
	(rule__Architecture__OutputAssignment_3)
	{ after(grammarAccess.getArchitectureAccess().getOutputAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group_2__0__Impl
	rule__Architecture__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getInterAssignment_2_0()); }
	(rule__Architecture__InterAssignment_2_0)
	{ after(grammarAccess.getArchitectureAccess().getInterAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
		(rule__Architecture__ClassAssignment_2_1)
		{ after(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
	)
	(
		{ before(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
		(rule__Architecture__ClassAssignment_2_1)*
		{ after(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Classification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classification__Group__0__Impl
	rule__Classification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationAccess().getDropAssignment_0()); }
	(rule__Classification__DropAssignment_0)?
	{ after(grammarAccess.getClassificationAccess().getDropAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationAccess().getDAssignment_1()); }
	(rule__Classification__DAssignment_1)
	{ after(grammarAccess.getClassificationAccess().getDAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConvDrop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvDrop__Group__0__Impl
	rule__ConvDrop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvDropAccess().getConvAssignment_0()); }
	(rule__ConvDrop__ConvAssignment_0)
	{ after(grammarAccess.getConvDropAccess().getConvAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvDrop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvDropAccess().getDropAssignment_1()); }
	(rule__ConvDrop__DropAssignment_1)?
	{ after(grammarAccess.getConvDropAccess().getDropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeConv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeConv__Group__0__Impl
	rule__MergeConv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeConv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeConvAccess().getMergeAssignment_0()); }
	(rule__MergeConv__MergeAssignment_0)
	{ after(grammarAccess.getMergeConvAccess().getMergeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeConv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeConv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeConv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeConvAccess().getConvdropAssignment_1()); }
	(rule__MergeConv__ConvdropAssignment_1)*
	{ after(grammarAccess.getMergeConvAccess().getConvdropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConvOrMerge__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvOrMerge__Group_1__0__Impl
	rule__ConvOrMerge__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_1_0()); }
	(rule__ConvOrMerge__ConvdropAssignment_1_0)*
	{ after(grammarAccess.getConvOrMergeAccess().getConvdropAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvOrMerge__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConvOrMergeAccess().getMergeConvAssignment_1_1()); }
		(rule__ConvOrMerge__MergeConvAssignment_1_1)
		{ after(grammarAccess.getConvOrMergeAccess().getMergeConvAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getConvOrMergeAccess().getMergeConvAssignment_1_1()); }
		(rule__ConvOrMerge__MergeConvAssignment_1_1)*
		{ after(grammarAccess.getConvOrMergeAccess().getMergeConvAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getPAssignment_0()); }
	(rule__Left__PAssignment_0)?
	{ after(grammarAccess.getLeftAccess().getPAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getComAssignment_1()); }
	(rule__Left__ComAssignment_1)
	{ after(grammarAccess.getLeftAccess().getComAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getPoolAssignment_2()); }
	(rule__Left__PoolAssignment_2)?
	{ after(grammarAccess.getLeftAccess().getPoolAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group_1__0__Impl
	rule__Right__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightAction_1_0()); }
	()
	{ after(grammarAccess.getRightAccess().getRightAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getEmptyAssignment_1_1()); }
	(rule__Right__EmptyAssignment_1_1)
	{ after(grammarAccess.getRightAccess().getEmptyAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeBody__Group__0__Impl
	rule__MergeBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeBodyAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getMergeBodyAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeBody__Group__1__Impl
	rule__MergeBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeBodyAccess().getLeftAssignment_1()); }
	(rule__MergeBody__LeftAssignment_1)
	{ after(grammarAccess.getMergeBodyAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeBody__Group__2__Impl
	rule__MergeBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeBodyAccess().getVirgAssignment_2()); }
	(rule__MergeBody__VirgAssignment_2)
	{ after(grammarAccess.getMergeBodyAccess().getVirgAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeBody__Group__3__Impl
	rule__MergeBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeBodyAccess().getRightAssignment_3()); }
	(rule__MergeBody__RightAssignment_3)
	{ after(grammarAccess.getMergeBodyAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeBody__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeBodyAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMergeBodyAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Merge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__0__Impl
	rule__Merge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeAccess().getDbAssignment_0()); }
	(rule__Merge__DbAssignment_0)
	{ after(grammarAccess.getMergeAccess().getDbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__1__Impl
	rule__Merge__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMergeAccess().getMergeBodyAssignment_1()); }
		(rule__Merge__MergeBodyAssignment_1)
		{ after(grammarAccess.getMergeAccess().getMergeBodyAssignment_1()); }
	)
	(
		{ before(grammarAccess.getMergeAccess().getMergeBodyAssignment_1()); }
		(rule__Merge__MergeBodyAssignment_1)*
		{ after(grammarAccess.getMergeAccess().getMergeBodyAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Merge__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeAccess().getFmAssignment_2()); }
	(rule__Merge__FmAssignment_2)
	{ after(grammarAccess.getMergeAccess().getFmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureExtraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__0__Impl
	rule__FeatureExtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getAlternatives_0()); }
	(rule__FeatureExtraction__Alternatives_0)
	{ after(grammarAccess.getFeatureExtractionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__1__Impl
	rule__FeatureExtraction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getDropAssignment_1()); }
	(rule__FeatureExtraction__DropAssignment_1)?
	{ after(grammarAccess.getFeatureExtractionAccess().getDropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getPoolAssignment_2()); }
	(rule__FeatureExtraction__PoolAssignment_2)?
	{ after(grammarAccess.getFeatureExtractionAccess().getPoolAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SML__SmlAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSMLAccess().getSmlArchitectureParserRuleCall_0()); }
		ruleArchitecture
		{ after(grammarAccess.getSMLAccess().getSmlArchitectureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__InputAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
		(
			{ before(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
			'input'
			{ after(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
		)
		{ after(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__FeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getFeFeatureExtractionParserRuleCall_1_0()); }
		ruleFeatureExtraction
		{ after(grammarAccess.getArchitectureAccess().getFeFeatureExtractionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__InterAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getInterIntersticeParserRuleCall_2_0_0()); }
		ruleInterstice
		{ after(grammarAccess.getArchitectureAccess().getInterIntersticeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__ClassAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getClassClassificationParserRuleCall_2_1_0()); }
		ruleClassification
		{ after(grammarAccess.getArchitectureAccess().getClassClassificationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__OutputAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
		(
			{ before(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
			'output'
			{ after(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
		)
		{ after(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__BnconvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getBnconvBnconvKeyword_0_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getBnconvBnconvKeyword_0_0()); }
			'bnconv'
			{ after(grammarAccess.getConvolutionAccess().getBnconvBnconvKeyword_0_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getBnconvBnconvKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__ConvbnAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getConvbnConvbnKeyword_1_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getConvbnConvbnKeyword_1_0()); }
			'convbn'
			{ after(grammarAccess.getConvolutionAccess().getConvbnConvbnKeyword_1_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getConvbnConvbnKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__ConvAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
			'conv'
			{ after(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__UpconvAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
			'upconv'
			{ after(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__FlatAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
		(
			{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
			'flatten'
			{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
		)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__GpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getGpGlobalPoolingParserRuleCall_1_0()); }
		ruleGlobalPooling
		{ after(grammarAccess.getFlattenOrGlobalAccess().getGpGlobalPoolingParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interstice__FgAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntersticeAccess().getFgFlattenOrGlobalParserRuleCall_0()); }
		ruleFlattenOrGlobal
		{ after(grammarAccess.getIntersticeAccess().getFgFlattenOrGlobalParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__DropAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationAccess().getDropDropoutParserRuleCall_0_0()); }
		ruleDropout
		{ after(grammarAccess.getClassificationAccess().getDropDropoutParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__DAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
		(
			{ before(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
			'dense'
			{ after(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
		)
		{ after(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__ConvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvDropAccess().getConvConvolutionParserRuleCall_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getConvDropAccess().getConvConvolutionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__DropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvDropAccess().getDropDropoutParserRuleCall_1_0()); }
		ruleDropout
		{ after(grammarAccess.getConvDropAccess().getDropDropoutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeConv__MergeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeConvAccess().getMergeMergeParserRuleCall_0_0()); }
		ruleMerge
		{ after(grammarAccess.getMergeConvAccess().getMergeMergeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeConv__ConvdropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeConvAccess().getConvdropConvDropParserRuleCall_1_0()); }
		ruleConvDrop
		{ after(grammarAccess.getMergeConvAccess().getConvdropConvDropParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__ConvdropAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_0_0()); }
		ruleConvDrop
		{ after(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__ConvdropAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_1_0_0()); }
		ruleConvDrop
		{ after(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvOrMerge__MergeConvAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvOrMergeAccess().getMergeConvMergeConvParserRuleCall_1_1_0()); }
		ruleMergeConv
		{ after(grammarAccess.getConvOrMergeAccess().getMergeConvMergeConvParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__PAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getPPoolingParserRuleCall_0_0()); }
		rulePooling
		{ after(grammarAccess.getLeftAccess().getPPoolingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__ComAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getComConvOrMergeParserRuleCall_1_0()); }
		ruleConvOrMerge
		{ after(grammarAccess.getLeftAccess().getComConvOrMergeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__PoolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getPoolPoolingParserRuleCall_2_0()); }
		rulePooling
		{ after(grammarAccess.getLeftAccess().getPoolPoolingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__ConvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getConvConvolutionParserRuleCall_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getRightAccess().getConvConvolutionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__EmptyAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
			'Empty'
			{ after(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeBodyAccess().getLeftLeftParserRuleCall_1_0()); }
		ruleLeft
		{ after(grammarAccess.getMergeBodyAccess().getLeftLeftParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__VirgAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeBodyAccess().getVirgCommaKeyword_2_0()); }
		(
			{ before(grammarAccess.getMergeBodyAccess().getVirgCommaKeyword_2_0()); }
			','
			{ after(grammarAccess.getMergeBodyAccess().getVirgCommaKeyword_2_0()); }
		)
		{ after(grammarAccess.getMergeBodyAccess().getVirgCommaKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeBody__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeBodyAccess().getRightRightParserRuleCall_3_0()); }
		ruleRight
		{ after(grammarAccess.getMergeBodyAccess().getRightRightParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__DbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getDbLeftSquareBracketKeyword_0_0()); }
		(
			{ before(grammarAccess.getMergeAccess().getDbLeftSquareBracketKeyword_0_0()); }
			'['
			{ after(grammarAccess.getMergeAccess().getDbLeftSquareBracketKeyword_0_0()); }
		)
		{ after(grammarAccess.getMergeAccess().getDbLeftSquareBracketKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__MergeBodyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getMergeBodyMergeBodyParserRuleCall_1_0()); }
		ruleMergeBody
		{ after(grammarAccess.getMergeAccess().getMergeBodyMergeBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__FmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getFmRightSquareBracketKeyword_2_0()); }
		(
			{ before(grammarAccess.getMergeAccess().getFmRightSquareBracketKeyword_2_0()); }
			']'
			{ after(grammarAccess.getMergeAccess().getFmRightSquareBracketKeyword_2_0()); }
		)
		{ after(grammarAccess.getMergeAccess().getFmRightSquareBracketKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__ConvAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getConvConvolutionParserRuleCall_0_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getFeatureExtractionAccess().getConvConvolutionParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__MergeAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getMergeMergeParserRuleCall_0_1_0()); }
		ruleMerge
		{ after(grammarAccess.getFeatureExtractionAccess().getMergeMergeParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__DropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getDropDropoutParserRuleCall_1_0()); }
		ruleDropout
		{ after(grammarAccess.getFeatureExtractionAccess().getDropDropoutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__PoolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getPoolPoolingParserRuleCall_2_0()); }
		rulePooling
		{ after(grammarAccess.getFeatureExtractionAccess().getPoolPoolingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
