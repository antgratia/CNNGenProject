/*
 * generated by Xtext 2.25.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalSMLParser;
import xtext.services.SMLGrammarAccess;

public class SMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPoolingAccess().getAlternatives(), "rule__Pooling__Alternatives");
			builder.put(grammarAccess.getConvolutionAccess().getAlternatives(), "rule__Convolution__Alternatives");
			builder.put(grammarAccess.getGlobalPoolingAccess().getAlternatives(), "rule__GlobalPooling__Alternatives");
			builder.put(grammarAccess.getFlattenOrGlobalAccess().getAlternatives(), "rule__FlattenOrGlobal__Alternatives");
			builder.put(grammarAccess.getRightAccess().getAlternatives(), "rule__Right__Alternatives");
			builder.put(grammarAccess.getMergeAccess().getAlternatives(), "rule__Merge__Alternatives");
			builder.put(grammarAccess.getFeatureExtractionAccess().getAlternatives_0(), "rule__FeatureExtraction__Alternatives_0");
			builder.put(grammarAccess.getArchitectureAccess().getGroup(), "rule__Architecture__Group__0");
			builder.put(grammarAccess.getArchitectureAccess().getGroup_2(), "rule__Architecture__Group_2__0");
			builder.put(grammarAccess.getBnConvAccess().getGroup(), "rule__BnConv__Group__0");
			builder.put(grammarAccess.getConvBnAccess().getGroup(), "rule__ConvBn__Group__0");
			builder.put(grammarAccess.getClassificationAccess().getGroup(), "rule__Classification__Group__0");
			builder.put(grammarAccess.getConvDropAccess().getGroup(), "rule__ConvDrop__Group__0");
			builder.put(grammarAccess.getLeftRecuAccess().getGroup(), "rule__LeftRecu__Group__0");
			builder.put(grammarAccess.getMergeRecuAccess().getGroup(), "rule__MergeRecu__Group__0");
			builder.put(grammarAccess.getLeftNonRecursiveAccess().getGroup(), "rule__LeftNonRecursive__Group__0");
			builder.put(grammarAccess.getRightAccess().getGroup_1(), "rule__Right__Group_1__0");
			builder.put(grammarAccess.getMergeNonRecuAccess().getGroup(), "rule__MergeNonRecu__Group__0");
			builder.put(grammarAccess.getHighwayAccess().getGroup(), "rule__Highway__Group__0");
			builder.put(grammarAccess.getHighwayAccess().getGroup_1(), "rule__Highway__Group_1__0");
			builder.put(grammarAccess.getFeatureExtractionAccess().getGroup(), "rule__FeatureExtraction__Group__0");
			builder.put(grammarAccess.getSMLAccess().getSmlAssignment(), "rule__SML__SmlAssignment");
			builder.put(grammarAccess.getArchitectureAccess().getInputAssignment_0(), "rule__Architecture__InputAssignment_0");
			builder.put(grammarAccess.getArchitectureAccess().getFeAssignment_1(), "rule__Architecture__FeAssignment_1");
			builder.put(grammarAccess.getArchitectureAccess().getInterAssignment_2_0(), "rule__Architecture__InterAssignment_2_0");
			builder.put(grammarAccess.getArchitectureAccess().getClassAssignment_2_1(), "rule__Architecture__ClassAssignment_2_1");
			builder.put(grammarAccess.getArchitectureAccess().getOutputAssignment_3(), "rule__Architecture__OutputAssignment_3");
			builder.put(grammarAccess.getConvolutionAccess().getBnconvAssignment_0(), "rule__Convolution__BnconvAssignment_0");
			builder.put(grammarAccess.getConvolutionAccess().getConvbnAssignment_1(), "rule__Convolution__ConvbnAssignment_1");
			builder.put(grammarAccess.getConvolutionAccess().getConvAssignment_2(), "rule__Convolution__ConvAssignment_2");
			builder.put(grammarAccess.getConvolutionAccess().getUpconvAssignment_3(), "rule__Convolution__UpconvAssignment_3");
			builder.put(grammarAccess.getFlattenOrGlobalAccess().getFlatAssignment_0(), "rule__FlattenOrGlobal__FlatAssignment_0");
			builder.put(grammarAccess.getFlattenOrGlobalAccess().getGpAssignment_1(), "rule__FlattenOrGlobal__GpAssignment_1");
			builder.put(grammarAccess.getIntersticeAccess().getFgAssignment(), "rule__Interstice__FgAssignment");
			builder.put(grammarAccess.getClassificationAccess().getDropAssignment_0(), "rule__Classification__DropAssignment_0");
			builder.put(grammarAccess.getClassificationAccess().getDAssignment_1(), "rule__Classification__DAssignment_1");
			builder.put(grammarAccess.getConvDropAccess().getConvAssignment_0(), "rule__ConvDrop__ConvAssignment_0");
			builder.put(grammarAccess.getConvDropAccess().getDropAssignment_1(), "rule__ConvDrop__DropAssignment_1");
			builder.put(grammarAccess.getLeftRecuAccess().getPAssignment_0(), "rule__LeftRecu__PAssignment_0");
			builder.put(grammarAccess.getLeftRecuAccess().getConvdropbeginAssignment_1(), "rule__LeftRecu__ConvdropbeginAssignment_1");
			builder.put(grammarAccess.getLeftRecuAccess().getMergeAssignment_2(), "rule__LeftRecu__MergeAssignment_2");
			builder.put(grammarAccess.getLeftRecuAccess().getConvdropendAssignment_3(), "rule__LeftRecu__ConvdropendAssignment_3");
			builder.put(grammarAccess.getLeftRecuAccess().getPoolAssignment_4(), "rule__LeftRecu__PoolAssignment_4");
			builder.put(grammarAccess.getMergeRecuAccess().getDbAssignment_0(), "rule__MergeRecu__DbAssignment_0");
			builder.put(grammarAccess.getMergeRecuAccess().getLeftAssignment_1(), "rule__MergeRecu__LeftAssignment_1");
			builder.put(grammarAccess.getMergeRecuAccess().getVirgAssignment_2(), "rule__MergeRecu__VirgAssignment_2");
			builder.put(grammarAccess.getMergeRecuAccess().getRightAssignment_3(), "rule__MergeRecu__RightAssignment_3");
			builder.put(grammarAccess.getMergeRecuAccess().getFmAssignment_4(), "rule__MergeRecu__FmAssignment_4");
			builder.put(grammarAccess.getLeftNonRecursiveAccess().getPAssignment_0(), "rule__LeftNonRecursive__PAssignment_0");
			builder.put(grammarAccess.getLeftNonRecursiveAccess().getConvdropAssignment_1(), "rule__LeftNonRecursive__ConvdropAssignment_1");
			builder.put(grammarAccess.getLeftNonRecursiveAccess().getPoolAssignment_2(), "rule__LeftNonRecursive__PoolAssignment_2");
			builder.put(grammarAccess.getRightAccess().getConvAssignment_0(), "rule__Right__ConvAssignment_0");
			builder.put(grammarAccess.getMergeNonRecuAccess().getDbAssignment_0(), "rule__MergeNonRecu__DbAssignment_0");
			builder.put(grammarAccess.getMergeNonRecuAccess().getLeftNonRecAssignment_1(), "rule__MergeNonRecu__LeftNonRecAssignment_1");
			builder.put(grammarAccess.getMergeNonRecuAccess().getVirgAssignment_2(), "rule__MergeNonRecu__VirgAssignment_2");
			builder.put(grammarAccess.getMergeNonRecuAccess().getRightAssignment_3(), "rule__MergeNonRecu__RightAssignment_3");
			builder.put(grammarAccess.getMergeNonRecuAccess().getFmAssignment_4(), "rule__MergeNonRecu__FmAssignment_4");
			builder.put(grammarAccess.getMergeAccess().getMnrAssignment_0(), "rule__Merge__MnrAssignment_0");
			builder.put(grammarAccess.getMergeAccess().getMrAssignment_1(), "rule__Merge__MrAssignment_1");
			builder.put(grammarAccess.getHighwayAccess().getDbAssignment_0(), "rule__Highway__DbAssignment_0");
			builder.put(grammarAccess.getHighwayAccess().getLeftNonRecAssignment_1_0(), "rule__Highway__LeftNonRecAssignment_1_0");
			builder.put(grammarAccess.getHighwayAccess().getConvAssignment_1_2(), "rule__Highway__ConvAssignment_1_2");
			builder.put(grammarAccess.getHighwayAccess().getFmAssignment_2(), "rule__Highway__FmAssignment_2");
			builder.put(grammarAccess.getFeatureExtractionAccess().getConvAssignment_0_0(), "rule__FeatureExtraction__ConvAssignment_0_0");
			builder.put(grammarAccess.getFeatureExtractionAccess().getMergeAssignment_0_1(), "rule__FeatureExtraction__MergeAssignment_0_1");
			builder.put(grammarAccess.getFeatureExtractionAccess().getHwAssignment_0_2(), "rule__FeatureExtraction__HwAssignment_0_2");
			builder.put(grammarAccess.getFeatureExtractionAccess().getDropAssignment_1(), "rule__FeatureExtraction__DropAssignment_1");
			builder.put(grammarAccess.getFeatureExtractionAccess().getPoolAssignment_2(), "rule__FeatureExtraction__PoolAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SMLGrammarAccess grammarAccess;

	@Override
	protected InternalSMLParser createParser() {
		InternalSMLParser result = new InternalSMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
