/*
 * generated by Xtext 2.25.0
 */
grammar InternalSML;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.services.SMLGrammarAccess;

}
@parser::members {
	private SMLGrammarAccess grammarAccess;

	public void setGrammarAccess(SMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSML
entryRuleSML
:
{ before(grammarAccess.getSMLRule()); }
	 ruleSML
{ after(grammarAccess.getSMLRule()); } 
	 EOF 
;

// Rule SML
ruleSML 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSMLAccess().getSmlAssignment()); }
		(rule__SML__SmlAssignment)
		{ after(grammarAccess.getSMLAccess().getSmlAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArchitecture
entryRuleArchitecture
:
{ before(grammarAccess.getArchitectureRule()); }
	 ruleArchitecture
{ after(grammarAccess.getArchitectureRule()); } 
	 EOF 
;

// Rule Architecture
ruleArchitecture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArchitectureAccess().getGroup()); }
		(rule__Architecture__Group__0)
		{ after(grammarAccess.getArchitectureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropout
entryRuleDropout
:
{ before(grammarAccess.getDropoutRule()); }
	 ruleDropout
{ after(grammarAccess.getDropoutRule()); } 
	 EOF 
;

// Rule Dropout
ruleDropout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropoutAccess().getDropoutKeyword()); }
		'dropout'
		{ after(grammarAccess.getDropoutAccess().getDropoutKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePooling
entryRulePooling
:
{ before(grammarAccess.getPoolingRule()); }
	 rulePooling
{ after(grammarAccess.getPoolingRule()); } 
	 EOF 
;

// Rule Pooling
rulePooling 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPoolingAccess().getAlternatives()); }
		(rule__Pooling__Alternatives)
		{ after(grammarAccess.getPoolingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDebutMerge
entryRuleDebutMerge
:
{ before(grammarAccess.getDebutMergeRule()); }
	 ruleDebutMerge
{ after(grammarAccess.getDebutMergeRule()); } 
	 EOF 
;

// Rule DebutMerge
ruleDebutMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDebutMergeAccess().getLeftSquareBracketKeyword()); }
		'['
		{ after(grammarAccess.getDebutMergeAccess().getLeftSquareBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFinMerge
entryRuleFinMerge
:
{ before(grammarAccess.getFinMergeRule()); }
	 ruleFinMerge
{ after(grammarAccess.getFinMergeRule()); } 
	 EOF 
;

// Rule FinMerge
ruleFinMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFinMergeAccess().getRightSquareBracketKeyword()); }
		']'
		{ after(grammarAccess.getFinMergeAccess().getRightSquareBracketKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBnConv
entryRuleBnConv
:
{ before(grammarAccess.getBnConvRule()); }
	 ruleBnConv
{ after(grammarAccess.getBnConvRule()); } 
	 EOF 
;

// Rule BnConv
ruleBnConv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBnConvAccess().getGroup()); }
		(rule__BnConv__Group__0)
		{ after(grammarAccess.getBnConvAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvBn
entryRuleConvBn
:
{ before(grammarAccess.getConvBnRule()); }
	 ruleConvBn
{ after(grammarAccess.getConvBnRule()); } 
	 EOF 
;

// Rule ConvBn
ruleConvBn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvBnAccess().getGroup()); }
		(rule__ConvBn__Group__0)
		{ after(grammarAccess.getConvBnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvolution
entryRuleConvolution
:
{ before(grammarAccess.getConvolutionRule()); }
	 ruleConvolution
{ after(grammarAccess.getConvolutionRule()); } 
	 EOF 
;

// Rule Convolution
ruleConvolution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvolutionAccess().getAlternatives()); }
		(rule__Convolution__Alternatives)
		{ after(grammarAccess.getConvolutionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalPooling
entryRuleGlobalPooling
:
{ before(grammarAccess.getGlobalPoolingRule()); }
	 ruleGlobalPooling
{ after(grammarAccess.getGlobalPoolingRule()); } 
	 EOF 
;

// Rule GlobalPooling
ruleGlobalPooling 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getAlternatives()); }
		(rule__GlobalPooling__Alternatives)
		{ after(grammarAccess.getGlobalPoolingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlattenOrGlobal
entryRuleFlattenOrGlobal
:
{ before(grammarAccess.getFlattenOrGlobalRule()); }
	 ruleFlattenOrGlobal
{ after(grammarAccess.getFlattenOrGlobalRule()); } 
	 EOF 
;

// Rule FlattenOrGlobal
ruleFlattenOrGlobal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getAlternatives()); }
		(rule__FlattenOrGlobal__Alternatives)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterstice
entryRuleInterstice
:
{ before(grammarAccess.getIntersticeRule()); }
	 ruleInterstice
{ after(grammarAccess.getIntersticeRule()); } 
	 EOF 
;

// Rule Interstice
ruleInterstice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntersticeAccess().getFgAssignment()); }
		(rule__Interstice__FgAssignment)
		{ after(grammarAccess.getIntersticeAccess().getFgAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassification
entryRuleClassification
:
{ before(grammarAccess.getClassificationRule()); }
	 ruleClassification
{ after(grammarAccess.getClassificationRule()); } 
	 EOF 
;

// Rule Classification
ruleClassification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassificationAccess().getGroup()); }
		(rule__Classification__Group__0)
		{ after(grammarAccess.getClassificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvDrop
entryRuleConvDrop
:
{ before(grammarAccess.getConvDropRule()); }
	 ruleConvDrop
{ after(grammarAccess.getConvDropRule()); } 
	 EOF 
;

// Rule ConvDrop
ruleConvDrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvDropAccess().getGroup()); }
		(rule__ConvDrop__Group__0)
		{ after(grammarAccess.getConvDropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftRecu
entryRuleLeftRecu
:
{ before(grammarAccess.getLeftRecuRule()); }
	 ruleLeftRecu
{ after(grammarAccess.getLeftRecuRule()); } 
	 EOF 
;

// Rule LeftRecu
ruleLeftRecu 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftRecuAccess().getGroup()); }
		(rule__LeftRecu__Group__0)
		{ after(grammarAccess.getLeftRecuAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeRecu
entryRuleMergeRecu
:
{ before(grammarAccess.getMergeRecuRule()); }
	 ruleMergeRecu
{ after(grammarAccess.getMergeRecuRule()); } 
	 EOF 
;

// Rule MergeRecu
ruleMergeRecu 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeRecuAccess().getGroup()); }
		(rule__MergeRecu__Group__0)
		{ after(grammarAccess.getMergeRecuAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftNonRecursive
entryRuleLeftNonRecursive
:
{ before(grammarAccess.getLeftNonRecursiveRule()); }
	 ruleLeftNonRecursive
{ after(grammarAccess.getLeftNonRecursiveRule()); } 
	 EOF 
;

// Rule LeftNonRecursive
ruleLeftNonRecursive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getGroup()); }
		(rule__LeftNonRecursive__Group__0)
		{ after(grammarAccess.getLeftNonRecursiveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getAlternatives()); }
		(rule__Right__Alternatives)
		{ after(grammarAccess.getRightAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMergeNonRecu
entryRuleMergeNonRecu
:
{ before(grammarAccess.getMergeNonRecuRule()); }
	 ruleMergeNonRecu
{ after(grammarAccess.getMergeNonRecuRule()); } 
	 EOF 
;

// Rule MergeNonRecu
ruleMergeNonRecu 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getGroup()); }
		(rule__MergeNonRecu__Group__0)
		{ after(grammarAccess.getMergeNonRecuAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMerge
entryRuleMerge
:
{ before(grammarAccess.getMergeRule()); }
	 ruleMerge
{ after(grammarAccess.getMergeRule()); } 
	 EOF 
;

// Rule Merge
ruleMerge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMergeAccess().getAlternatives()); }
		(rule__Merge__Alternatives)
		{ after(grammarAccess.getMergeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHighway
entryRuleHighway
:
{ before(grammarAccess.getHighwayRule()); }
	 ruleHighway
{ after(grammarAccess.getHighwayRule()); } 
	 EOF 
;

// Rule Highway
ruleHighway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHighwayAccess().getGroup()); }
		(rule__Highway__Group__0)
		{ after(grammarAccess.getHighwayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureExtraction
entryRuleFeatureExtraction
:
{ before(grammarAccess.getFeatureExtractionRule()); }
	 ruleFeatureExtraction
{ after(grammarAccess.getFeatureExtractionRule()); } 
	 EOF 
;

// Rule FeatureExtraction
ruleFeatureExtraction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getGroup()); }
		(rule__FeatureExtraction__Group__0)
		{ after(grammarAccess.getFeatureExtractionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pooling__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoolingAccess().getAvg_poolingKeyword_0()); }
		'avg_pooling'
		{ after(grammarAccess.getPoolingAccess().getAvg_poolingKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPoolingAccess().getMax_poolingKeyword_1()); }
		'max_pooling'
		{ after(grammarAccess.getPoolingAccess().getMax_poolingKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getBnconvAssignment_0()); }
		(rule__Convolution__BnconvAssignment_0)
		{ after(grammarAccess.getConvolutionAccess().getBnconvAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getConvbnAssignment_1()); }
		(rule__Convolution__ConvbnAssignment_1)
		{ after(grammarAccess.getConvolutionAccess().getConvbnAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getConvAssignment_2()); }
		(rule__Convolution__ConvAssignment_2)
		{ after(grammarAccess.getConvolutionAccess().getConvAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getConvolutionAccess().getUpconvAssignment_3()); }
		(rule__Convolution__UpconvAssignment_3)
		{ after(grammarAccess.getConvolutionAccess().getUpconvAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalPooling__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getGlobal_avg_poolingKeyword_0()); }
		'global_avg_pooling'
		{ after(grammarAccess.getGlobalPoolingAccess().getGlobal_avg_poolingKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalPoolingAccess().getGlobal_max_poolingKeyword_1()); }
		'global_max_pooling'
		{ after(grammarAccess.getGlobalPoolingAccess().getGlobal_max_poolingKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatAssignment_0()); }
		(rule__FlattenOrGlobal__FlatAssignment_0)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getGpAssignment_1()); }
		(rule__FlattenOrGlobal__GpAssignment_1)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getGpAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getRightAccess().getConvAssignment_0()); }
			(rule__Right__ConvAssignment_0)
			{ after(grammarAccess.getRightAccess().getConvAssignment_0()); }
		)
		(
			{ before(grammarAccess.getRightAccess().getConvAssignment_0()); }
			(rule__Right__ConvAssignment_0)*
			{ after(grammarAccess.getRightAccess().getConvAssignment_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getRightAccess().getGroup_1()); }
		(rule__Right__Group_1__0)
		{ after(grammarAccess.getRightAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getMnrAssignment_0()); }
		(rule__Merge__MnrAssignment_0)
		{ after(grammarAccess.getMergeAccess().getMnrAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getMergeAccess().getMrAssignment_1()); }
		(rule__Merge__MrAssignment_1)
		{ after(grammarAccess.getMergeAccess().getMrAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getConvAssignment_0_0()); }
		(rule__FeatureExtraction__ConvAssignment_0_0)
		{ after(grammarAccess.getFeatureExtractionAccess().getConvAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getMergeAssignment_0_1()); }
		(rule__FeatureExtraction__MergeAssignment_0_1)
		{ after(grammarAccess.getFeatureExtractionAccess().getMergeAssignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getHwAssignment_0_2()); }
		(rule__FeatureExtraction__HwAssignment_0_2)
		{ after(grammarAccess.getFeatureExtractionAccess().getHwAssignment_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__0__Impl
	rule__Architecture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getInputAssignment_0()); }
	(rule__Architecture__InputAssignment_0)
	{ after(grammarAccess.getArchitectureAccess().getInputAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__1__Impl
	rule__Architecture__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
		(rule__Architecture__FeAssignment_1)
		{ after(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
	)
	(
		{ before(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
		(rule__Architecture__FeAssignment_1)*
		{ after(grammarAccess.getArchitectureAccess().getFeAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__2__Impl
	rule__Architecture__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getGroup_2()); }
	(rule__Architecture__Group_2__0)?
	{ after(grammarAccess.getArchitectureAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getOutputAssignment_3()); }
	(rule__Architecture__OutputAssignment_3)
	{ after(grammarAccess.getArchitectureAccess().getOutputAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group_2__0__Impl
	rule__Architecture__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getInterAssignment_2_0()); }
	(rule__Architecture__InterAssignment_2_0)
	{ after(grammarAccess.getArchitectureAccess().getInterAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Architecture__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
	(rule__Architecture__ClassAssignment_2_1)*
	{ after(grammarAccess.getArchitectureAccess().getClassAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BnConv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BnConv__Group__0__Impl
	rule__BnConv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBnConvAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBnConvAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BnConv__Group__1__Impl
	rule__BnConv__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBnConvAccess().getBnKeyword_1()); }
	'bn'
	{ after(grammarAccess.getBnConvAccess().getBnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BnConv__Group__2__Impl
	rule__BnConv__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBnConvAccess().getConvKeyword_2()); }
	'conv'
	{ after(grammarAccess.getBnConvAccess().getConvKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BnConv__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BnConv__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBnConvAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBnConvAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConvBn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvBn__Group__0__Impl
	rule__ConvBn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvBnAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getConvBnAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvBn__Group__1__Impl
	rule__ConvBn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvBnAccess().getConvKeyword_1()); }
	'conv'
	{ after(grammarAccess.getConvBnAccess().getConvKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvBn__Group__2__Impl
	rule__ConvBn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvBnAccess().getBnKeyword_2()); }
	'bn'
	{ after(grammarAccess.getConvBnAccess().getBnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvBn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvBn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvBnAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConvBnAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Classification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classification__Group__0__Impl
	rule__Classification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationAccess().getDropAssignment_0()); }
	(rule__Classification__DropAssignment_0)?
	{ after(grammarAccess.getClassificationAccess().getDropAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Classification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassificationAccess().getDAssignment_1()); }
	(rule__Classification__DAssignment_1)
	{ after(grammarAccess.getClassificationAccess().getDAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConvDrop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvDrop__Group__0__Impl
	rule__ConvDrop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvDropAccess().getConvAssignment_0()); }
	(rule__ConvDrop__ConvAssignment_0)
	{ after(grammarAccess.getConvDropAccess().getConvAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConvDrop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConvDropAccess().getDropAssignment_1()); }
	(rule__ConvDrop__DropAssignment_1)?
	{ after(grammarAccess.getConvDropAccess().getDropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftRecu__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftRecu__Group__0__Impl
	rule__LeftRecu__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftRecuAccess().getPAssignment_0()); }
	(rule__LeftRecu__PAssignment_0)?
	{ after(grammarAccess.getLeftRecuAccess().getPAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftRecu__Group__1__Impl
	rule__LeftRecu__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftRecuAccess().getConvdropbeginAssignment_1()); }
	(rule__LeftRecu__ConvdropbeginAssignment_1)*
	{ after(grammarAccess.getLeftRecuAccess().getConvdropbeginAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftRecu__Group__2__Impl
	rule__LeftRecu__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftRecuAccess().getMergeAssignment_2()); }
	(rule__LeftRecu__MergeAssignment_2)
	{ after(grammarAccess.getLeftRecuAccess().getMergeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftRecu__Group__3__Impl
	rule__LeftRecu__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftRecuAccess().getConvdropendAssignment_3()); }
	(rule__LeftRecu__ConvdropendAssignment_3)*
	{ after(grammarAccess.getLeftRecuAccess().getConvdropendAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftRecu__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftRecuAccess().getPoolAssignment_4()); }
	(rule__LeftRecu__PoolAssignment_4)?
	{ after(grammarAccess.getLeftRecuAccess().getPoolAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeRecu__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeRecu__Group__0__Impl
	rule__MergeRecu__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeRecuAccess().getDbAssignment_0()); }
	(rule__MergeRecu__DbAssignment_0)
	{ after(grammarAccess.getMergeRecuAccess().getDbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeRecu__Group__1__Impl
	rule__MergeRecu__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeRecuAccess().getLeftAssignment_1()); }
	(rule__MergeRecu__LeftAssignment_1)
	{ after(grammarAccess.getMergeRecuAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeRecu__Group__2__Impl
	rule__MergeRecu__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeRecuAccess().getVirgAssignment_2()); }
	(rule__MergeRecu__VirgAssignment_2)
	{ after(grammarAccess.getMergeRecuAccess().getVirgAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeRecu__Group__3__Impl
	rule__MergeRecu__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeRecuAccess().getRightAssignment_3()); }
	(rule__MergeRecu__RightAssignment_3)
	{ after(grammarAccess.getMergeRecuAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeRecu__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeRecuAccess().getFmAssignment_4()); }
	(rule__MergeRecu__FmAssignment_4)
	{ after(grammarAccess.getMergeRecuAccess().getFmAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftNonRecursive__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftNonRecursive__Group__0__Impl
	rule__LeftNonRecursive__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftNonRecursiveAccess().getPAssignment_0()); }
	(rule__LeftNonRecursive__PAssignment_0)?
	{ after(grammarAccess.getLeftNonRecursiveAccess().getPAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftNonRecursive__Group__1__Impl
	rule__LeftNonRecursive__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getConvdropAssignment_1()); }
		(rule__LeftNonRecursive__ConvdropAssignment_1)
		{ after(grammarAccess.getLeftNonRecursiveAccess().getConvdropAssignment_1()); }
	)
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getConvdropAssignment_1()); }
		(rule__LeftNonRecursive__ConvdropAssignment_1)*
		{ after(grammarAccess.getLeftNonRecursiveAccess().getConvdropAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftNonRecursive__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftNonRecursiveAccess().getPoolAssignment_2()); }
	(rule__LeftNonRecursive__PoolAssignment_2)?
	{ after(grammarAccess.getLeftNonRecursiveAccess().getPoolAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group_1__0__Impl
	rule__Right__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightAction_1_0()); }
	()
	{ after(grammarAccess.getRightAccess().getRightAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getEmptyAssignment_1_1()); }
	(rule__Right__EmptyAssignment_1_1)
	{ after(grammarAccess.getRightAccess().getEmptyAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MergeNonRecu__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNonRecu__Group__0__Impl
	rule__MergeNonRecu__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNonRecuAccess().getDbAssignment_0()); }
	(rule__MergeNonRecu__DbAssignment_0)
	{ after(grammarAccess.getMergeNonRecuAccess().getDbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNonRecu__Group__1__Impl
	rule__MergeNonRecu__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNonRecuAccess().getLeftNonRecAssignment_1()); }
	(rule__MergeNonRecu__LeftNonRecAssignment_1)
	{ after(grammarAccess.getMergeNonRecuAccess().getLeftNonRecAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNonRecu__Group__2__Impl
	rule__MergeNonRecu__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNonRecuAccess().getVirgAssignment_2()); }
	(rule__MergeNonRecu__VirgAssignment_2)
	{ after(grammarAccess.getMergeNonRecuAccess().getVirgAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNonRecu__Group__3__Impl
	rule__MergeNonRecu__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNonRecuAccess().getRightAssignment_3()); }
	(rule__MergeNonRecu__RightAssignment_3)
	{ after(grammarAccess.getMergeNonRecuAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MergeNonRecu__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMergeNonRecuAccess().getFmAssignment_4()); }
	(rule__MergeNonRecu__FmAssignment_4)
	{ after(grammarAccess.getMergeNonRecuAccess().getFmAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Highway__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group__0__Impl
	rule__Highway__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getDbAssignment_0()); }
	(rule__Highway__DbAssignment_0)
	{ after(grammarAccess.getHighwayAccess().getDbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group__1__Impl
	rule__Highway__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getHighwayAccess().getGroup_1()); }
		(rule__Highway__Group_1__0)
		{ after(grammarAccess.getHighwayAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getHighwayAccess().getGroup_1()); }
		(rule__Highway__Group_1__0)*
		{ after(grammarAccess.getHighwayAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getFmAssignment_2()); }
	(rule__Highway__FmAssignment_2)
	{ after(grammarAccess.getHighwayAccess().getFmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Highway__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group_1__0__Impl
	rule__Highway__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getLeftNonRecAssignment_1_0()); }
	(rule__Highway__LeftNonRecAssignment_1_0)
	{ after(grammarAccess.getHighwayAccess().getLeftNonRecAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group_1__1__Impl
	rule__Highway__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getVerticalLineKeyword_1_1()); }
	'|'
	{ after(grammarAccess.getHighwayAccess().getVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group_1__2__Impl
	rule__Highway__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getConvAssignment_1_2()); }
	(rule__Highway__ConvAssignment_1_2)
	{ after(grammarAccess.getHighwayAccess().getConvAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Highway__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHighwayAccess().getCommaKeyword_1_3()); }
	','
	{ after(grammarAccess.getHighwayAccess().getCommaKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureExtraction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__0__Impl
	rule__FeatureExtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getAlternatives_0()); }
	(rule__FeatureExtraction__Alternatives_0)
	{ after(grammarAccess.getFeatureExtractionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__1__Impl
	rule__FeatureExtraction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getDropAssignment_1()); }
	(rule__FeatureExtraction__DropAssignment_1)?
	{ after(grammarAccess.getFeatureExtractionAccess().getDropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureExtraction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureExtractionAccess().getPoolAssignment_2()); }
	(rule__FeatureExtraction__PoolAssignment_2)?
	{ after(grammarAccess.getFeatureExtractionAccess().getPoolAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SML__SmlAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSMLAccess().getSmlArchitectureParserRuleCall_0()); }
		ruleArchitecture
		{ after(grammarAccess.getSMLAccess().getSmlArchitectureParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__InputAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
		(
			{ before(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
			'input'
			{ after(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
		)
		{ after(grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__FeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getFeFeatureExtractionParserRuleCall_1_0()); }
		ruleFeatureExtraction
		{ after(grammarAccess.getArchitectureAccess().getFeFeatureExtractionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__InterAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getInterIntersticeParserRuleCall_2_0_0()); }
		ruleInterstice
		{ after(grammarAccess.getArchitectureAccess().getInterIntersticeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__ClassAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getClassClassificationParserRuleCall_2_1_0()); }
		ruleClassification
		{ after(grammarAccess.getArchitectureAccess().getClassClassificationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__OutputAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
		(
			{ before(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
			'output'
			{ after(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
		)
		{ after(grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__BnconvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getBnconvBnConvParserRuleCall_0_0()); }
		ruleBnConv
		{ after(grammarAccess.getConvolutionAccess().getBnconvBnConvParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__ConvbnAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getConvbnConvBnParserRuleCall_1_0()); }
		ruleConvBn
		{ after(grammarAccess.getConvolutionAccess().getConvbnConvBnParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__ConvAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
			'conv'
			{ after(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Convolution__UpconvAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
		(
			{ before(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
			'upconv'
			{ after(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
		)
		{ after(grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__FlatAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
		(
			{ before(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
			'flatten'
			{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
		)
		{ after(grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlattenOrGlobal__GpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlattenOrGlobalAccess().getGpGlobalPoolingParserRuleCall_1_0()); }
		ruleGlobalPooling
		{ after(grammarAccess.getFlattenOrGlobalAccess().getGpGlobalPoolingParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interstice__FgAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntersticeAccess().getFgFlattenOrGlobalParserRuleCall_0()); }
		ruleFlattenOrGlobal
		{ after(grammarAccess.getIntersticeAccess().getFgFlattenOrGlobalParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__DropAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationAccess().getDropDropoutParserRuleCall_0_0()); }
		ruleDropout
		{ after(grammarAccess.getClassificationAccess().getDropDropoutParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classification__DAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
		(
			{ before(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
			'dense'
			{ after(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
		)
		{ after(grammarAccess.getClassificationAccess().getDDenseKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__ConvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvDropAccess().getConvConvolutionParserRuleCall_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getConvDropAccess().getConvConvolutionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvDrop__DropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvDropAccess().getDropDropoutParserRuleCall_1_0()); }
		ruleDropout
		{ after(grammarAccess.getConvDropAccess().getDropDropoutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__PAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftRecuAccess().getPPoolingParserRuleCall_0_0()); }
		rulePooling
		{ after(grammarAccess.getLeftRecuAccess().getPPoolingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__ConvdropbeginAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftRecuAccess().getConvdropbeginConvDropParserRuleCall_1_0()); }
		ruleConvDrop
		{ after(grammarAccess.getLeftRecuAccess().getConvdropbeginConvDropParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__MergeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftRecuAccess().getMergeMergeParserRuleCall_2_0()); }
		ruleMerge
		{ after(grammarAccess.getLeftRecuAccess().getMergeMergeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__ConvdropendAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftRecuAccess().getConvdropendConvDropParserRuleCall_3_0()); }
		ruleConvDrop
		{ after(grammarAccess.getLeftRecuAccess().getConvdropendConvDropParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftRecu__PoolAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftRecuAccess().getPoolPoolingParserRuleCall_4_0()); }
		rulePooling
		{ after(grammarAccess.getLeftRecuAccess().getPoolPoolingParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__DbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeRecuAccess().getDbDebutMergeParserRuleCall_0_0()); }
		ruleDebutMerge
		{ after(grammarAccess.getMergeRecuAccess().getDbDebutMergeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeRecuAccess().getLeftLeftRecuParserRuleCall_1_0()); }
		ruleLeftRecu
		{ after(grammarAccess.getMergeRecuAccess().getLeftLeftRecuParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__VirgAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeRecuAccess().getVirgCommaKeyword_2_0()); }
		(
			{ before(grammarAccess.getMergeRecuAccess().getVirgCommaKeyword_2_0()); }
			','
			{ after(grammarAccess.getMergeRecuAccess().getVirgCommaKeyword_2_0()); }
		)
		{ after(grammarAccess.getMergeRecuAccess().getVirgCommaKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeRecuAccess().getRightRightParserRuleCall_3_0()); }
		ruleRight
		{ after(grammarAccess.getMergeRecuAccess().getRightRightParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeRecu__FmAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeRecuAccess().getFmFinMergeParserRuleCall_4_0()); }
		ruleFinMerge
		{ after(grammarAccess.getMergeRecuAccess().getFmFinMergeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__PAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getPPoolingParserRuleCall_0_0()); }
		rulePooling
		{ after(grammarAccess.getLeftNonRecursiveAccess().getPPoolingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__ConvdropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getConvdropConvDropParserRuleCall_1_0()); }
		ruleConvDrop
		{ after(grammarAccess.getLeftNonRecursiveAccess().getConvdropConvDropParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftNonRecursive__PoolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftNonRecursiveAccess().getPoolPoolingParserRuleCall_2_0()); }
		rulePooling
		{ after(grammarAccess.getLeftNonRecursiveAccess().getPoolPoolingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__ConvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getConvConvolutionParserRuleCall_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getRightAccess().getConvConvolutionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__EmptyAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
			'Empty'
			{ after(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__DbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getDbDebutMergeParserRuleCall_0_0()); }
		ruleDebutMerge
		{ after(grammarAccess.getMergeNonRecuAccess().getDbDebutMergeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__LeftNonRecAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getLeftNonRecLeftNonRecursiveParserRuleCall_1_0()); }
		ruleLeftNonRecursive
		{ after(grammarAccess.getMergeNonRecuAccess().getLeftNonRecLeftNonRecursiveParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__VirgAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getVirgCommaKeyword_2_0()); }
		(
			{ before(grammarAccess.getMergeNonRecuAccess().getVirgCommaKeyword_2_0()); }
			','
			{ after(grammarAccess.getMergeNonRecuAccess().getVirgCommaKeyword_2_0()); }
		)
		{ after(grammarAccess.getMergeNonRecuAccess().getVirgCommaKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getRightRightParserRuleCall_3_0()); }
		ruleRight
		{ after(grammarAccess.getMergeNonRecuAccess().getRightRightParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MergeNonRecu__FmAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeNonRecuAccess().getFmFinMergeParserRuleCall_4_0()); }
		ruleFinMerge
		{ after(grammarAccess.getMergeNonRecuAccess().getFmFinMergeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__MnrAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getMnrMergeNonRecuParserRuleCall_0_0()); }
		ruleMergeNonRecu
		{ after(grammarAccess.getMergeAccess().getMnrMergeNonRecuParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__MrAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMergeAccess().getMrMergeRecuParserRuleCall_1_0()); }
		ruleMergeRecu
		{ after(grammarAccess.getMergeAccess().getMrMergeRecuParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__DbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighwayAccess().getDbDebutMergeParserRuleCall_0_0()); }
		ruleDebutMerge
		{ after(grammarAccess.getHighwayAccess().getDbDebutMergeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__LeftNonRecAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighwayAccess().getLeftNonRecLeftNonRecursiveParserRuleCall_1_0_0()); }
		ruleLeftNonRecursive
		{ after(grammarAccess.getHighwayAccess().getLeftNonRecLeftNonRecursiveParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__ConvAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighwayAccess().getConvConvolutionParserRuleCall_1_2_0()); }
		ruleConvolution
		{ after(grammarAccess.getHighwayAccess().getConvConvolutionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Highway__FmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighwayAccess().getFmFinMergeParserRuleCall_2_0()); }
		ruleFinMerge
		{ after(grammarAccess.getHighwayAccess().getFmFinMergeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__ConvAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getConvConvolutionParserRuleCall_0_0_0()); }
		ruleConvolution
		{ after(grammarAccess.getFeatureExtractionAccess().getConvConvolutionParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__MergeAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getMergeMergeParserRuleCall_0_1_0()); }
		ruleMerge
		{ after(grammarAccess.getFeatureExtractionAccess().getMergeMergeParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__HwAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getHwHighwayParserRuleCall_0_2_0()); }
		ruleHighway
		{ after(grammarAccess.getFeatureExtractionAccess().getHwHighwayParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__DropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getDropDropoutParserRuleCall_1_0()); }
		ruleDropout
		{ after(grammarAccess.getFeatureExtractionAccess().getDropDropoutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureExtraction__PoolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureExtractionAccess().getPoolPoolingParserRuleCall_2_0()); }
		rulePooling
		{ after(grammarAccess.getFeatureExtractionAccess().getPoolPoolingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
