/**
 * generated by Xtext 2.26.0
 */
package xtext.cNNDescLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.cNNDescLang.Architecture;
import xtext.cNNDescLang.CNNDescLang;
import xtext.cNNDescLang.CNNDescLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CNN Desc Lang</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.cNNDescLang.impl.CNNDescLangImpl#getCnndesclang <em>Cnndesclang</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CNNDescLangImpl extends MinimalEObjectImpl.Container implements CNNDescLang
{
  /**
   * The cached value of the '{@link #getCnndesclang() <em>Cnndesclang</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCnndesclang()
   * @generated
   * @ordered
   */
  protected Architecture cnndesclang;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CNNDescLangImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CNNDescLangPackage.Literals.CNN_DESC_LANG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Architecture getCnndesclang()
  {
    return cnndesclang;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCnndesclang(Architecture newCnndesclang, NotificationChain msgs)
  {
    Architecture oldCnndesclang = cnndesclang;
    cnndesclang = newCnndesclang;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG, oldCnndesclang, newCnndesclang);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCnndesclang(Architecture newCnndesclang)
  {
    if (newCnndesclang != cnndesclang)
    {
      NotificationChain msgs = null;
      if (cnndesclang != null)
        msgs = ((InternalEObject)cnndesclang).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG, null, msgs);
      if (newCnndesclang != null)
        msgs = ((InternalEObject)newCnndesclang).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG, null, msgs);
      msgs = basicSetCnndesclang(newCnndesclang, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG, newCnndesclang, newCnndesclang));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG:
        return basicSetCnndesclang(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG:
        return getCnndesclang();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG:
        setCnndesclang((Architecture)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG:
        setCnndesclang((Architecture)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CNNDescLangPackage.CNN_DESC_LANG__CNNDESCLANG:
        return cnndesclang != null;
    }
    return super.eIsSet(featureID);
  }

} //CNNDescLangImpl
