/**
 * generated by Xtext 2.25.0
 */
package xtext.sML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.sML.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SMLFactoryImpl extends EFactoryImpl implements SMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SMLFactory init()
  {
    try
    {
      SMLFactory theSMLFactory = (SMLFactory)EPackage.Registry.INSTANCE.getEFactory(SMLPackage.eNS_URI);
      if (theSMLFactory != null)
      {
        return theSMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SMLPackage.SML: return createSML();
      case SMLPackage.ARCHITECTURE: return createArchitecture();
      case SMLPackage.CONVOLUTION: return createConvolution();
      case SMLPackage.FLATTEN_OR_GLOBAL: return createFlattenOrGlobal();
      case SMLPackage.INTERSTICE: return createInterstice();
      case SMLPackage.CLASSIFICATION: return createClassification();
      case SMLPackage.CONV_DROP: return createConvDrop();
      case SMLPackage.LEFT_RECU: return createLeftRecu();
      case SMLPackage.MERGE_RECU: return createMergeRecu();
      case SMLPackage.LEFT_NON_RECURSIVE: return createLeftNonRecursive();
      case SMLPackage.RIGHT: return createRight();
      case SMLPackage.MERGE_NON_RECU: return createMergeNonRecu();
      case SMLPackage.MERGE: return createMerge();
      case SMLPackage.HIGHWAY: return createHighway();
      case SMLPackage.FEATURE_EXTRACTION: return createFeatureExtraction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SML createSML()
  {
    SMLImpl sml = new SMLImpl();
    return sml;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Architecture createArchitecture()
  {
    ArchitectureImpl architecture = new ArchitectureImpl();
    return architecture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Convolution createConvolution()
  {
    ConvolutionImpl convolution = new ConvolutionImpl();
    return convolution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FlattenOrGlobal createFlattenOrGlobal()
  {
    FlattenOrGlobalImpl flattenOrGlobal = new FlattenOrGlobalImpl();
    return flattenOrGlobal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interstice createInterstice()
  {
    IntersticeImpl interstice = new IntersticeImpl();
    return interstice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classification createClassification()
  {
    ClassificationImpl classification = new ClassificationImpl();
    return classification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConvDrop createConvDrop()
  {
    ConvDropImpl convDrop = new ConvDropImpl();
    return convDrop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeftRecu createLeftRecu()
  {
    LeftRecuImpl leftRecu = new LeftRecuImpl();
    return leftRecu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeRecu createMergeRecu()
  {
    MergeRecuImpl mergeRecu = new MergeRecuImpl();
    return mergeRecu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeftNonRecursive createLeftNonRecursive()
  {
    LeftNonRecursiveImpl leftNonRecursive = new LeftNonRecursiveImpl();
    return leftNonRecursive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Right createRight()
  {
    RightImpl right = new RightImpl();
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeNonRecu createMergeNonRecu()
  {
    MergeNonRecuImpl mergeNonRecu = new MergeNonRecuImpl();
    return mergeNonRecu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Merge createMerge()
  {
    MergeImpl merge = new MergeImpl();
    return merge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Highway createHighway()
  {
    HighwayImpl highway = new HighwayImpl();
    return highway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureExtraction createFeatureExtraction()
  {
    FeatureExtractionImpl featureExtraction = new FeatureExtractionImpl();
    return featureExtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SMLPackage getSMLPackage()
  {
    return (SMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SMLPackage getPackage()
  {
    return SMLPackage.eINSTANCE;
  }

} //SMLFactoryImpl
