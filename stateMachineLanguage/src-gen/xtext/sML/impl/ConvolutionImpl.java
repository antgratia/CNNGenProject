/**
 * generated by Xtext 2.26.0
 */
package xtext.sML.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.sML.Convolution;
import xtext.sML.SMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Convolution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.sML.impl.ConvolutionImpl#getBnconv <em>Bnconv</em>}</li>
 *   <li>{@link xtext.sML.impl.ConvolutionImpl#getConvbn <em>Convbn</em>}</li>
 *   <li>{@link xtext.sML.impl.ConvolutionImpl#getConv <em>Conv</em>}</li>
 *   <li>{@link xtext.sML.impl.ConvolutionImpl#getUpconv <em>Upconv</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConvolutionImpl extends MinimalEObjectImpl.Container implements Convolution
{
  /**
   * The default value of the '{@link #getBnconv() <em>Bnconv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBnconv()
   * @generated
   * @ordered
   */
  protected static final String BNCONV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBnconv() <em>Bnconv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBnconv()
   * @generated
   * @ordered
   */
  protected String bnconv = BNCONV_EDEFAULT;

  /**
   * The default value of the '{@link #getConvbn() <em>Convbn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConvbn()
   * @generated
   * @ordered
   */
  protected static final String CONVBN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConvbn() <em>Convbn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConvbn()
   * @generated
   * @ordered
   */
  protected String convbn = CONVBN_EDEFAULT;

  /**
   * The default value of the '{@link #getConv() <em>Conv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConv()
   * @generated
   * @ordered
   */
  protected static final String CONV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConv() <em>Conv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConv()
   * @generated
   * @ordered
   */
  protected String conv = CONV_EDEFAULT;

  /**
   * The default value of the '{@link #getUpconv() <em>Upconv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpconv()
   * @generated
   * @ordered
   */
  protected static final String UPCONV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUpconv() <em>Upconv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpconv()
   * @generated
   * @ordered
   */
  protected String upconv = UPCONV_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConvolutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SMLPackage.Literals.CONVOLUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBnconv()
  {
    return bnconv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBnconv(String newBnconv)
  {
    String oldBnconv = bnconv;
    bnconv = newBnconv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.CONVOLUTION__BNCONV, oldBnconv, bnconv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConvbn()
  {
    return convbn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConvbn(String newConvbn)
  {
    String oldConvbn = convbn;
    convbn = newConvbn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.CONVOLUTION__CONVBN, oldConvbn, convbn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConv()
  {
    return conv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConv(String newConv)
  {
    String oldConv = conv;
    conv = newConv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.CONVOLUTION__CONV, oldConv, conv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUpconv()
  {
    return upconv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpconv(String newUpconv)
  {
    String oldUpconv = upconv;
    upconv = newUpconv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.CONVOLUTION__UPCONV, oldUpconv, upconv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SMLPackage.CONVOLUTION__BNCONV:
        return getBnconv();
      case SMLPackage.CONVOLUTION__CONVBN:
        return getConvbn();
      case SMLPackage.CONVOLUTION__CONV:
        return getConv();
      case SMLPackage.CONVOLUTION__UPCONV:
        return getUpconv();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SMLPackage.CONVOLUTION__BNCONV:
        setBnconv((String)newValue);
        return;
      case SMLPackage.CONVOLUTION__CONVBN:
        setConvbn((String)newValue);
        return;
      case SMLPackage.CONVOLUTION__CONV:
        setConv((String)newValue);
        return;
      case SMLPackage.CONVOLUTION__UPCONV:
        setUpconv((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.CONVOLUTION__BNCONV:
        setBnconv(BNCONV_EDEFAULT);
        return;
      case SMLPackage.CONVOLUTION__CONVBN:
        setConvbn(CONVBN_EDEFAULT);
        return;
      case SMLPackage.CONVOLUTION__CONV:
        setConv(CONV_EDEFAULT);
        return;
      case SMLPackage.CONVOLUTION__UPCONV:
        setUpconv(UPCONV_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.CONVOLUTION__BNCONV:
        return BNCONV_EDEFAULT == null ? bnconv != null : !BNCONV_EDEFAULT.equals(bnconv);
      case SMLPackage.CONVOLUTION__CONVBN:
        return CONVBN_EDEFAULT == null ? convbn != null : !CONVBN_EDEFAULT.equals(convbn);
      case SMLPackage.CONVOLUTION__CONV:
        return CONV_EDEFAULT == null ? conv != null : !CONV_EDEFAULT.equals(conv);
      case SMLPackage.CONVOLUTION__UPCONV:
        return UPCONV_EDEFAULT == null ? upconv != null : !UPCONV_EDEFAULT.equals(upconv);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (bnconv: ");
    result.append(bnconv);
    result.append(", convbn: ");
    result.append(convbn);
    result.append(", conv: ");
    result.append(conv);
    result.append(", upconv: ");
    result.append(upconv);
    result.append(')');
    return result.toString();
  }

} //ConvolutionImpl
