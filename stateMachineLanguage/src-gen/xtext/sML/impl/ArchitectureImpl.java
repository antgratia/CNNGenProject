/**
 * generated by Xtext 2.25.0
 */
package xtext.sML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.sML.Architecture;
import xtext.sML.Classification;
import xtext.sML.FeatureExtraction;
import xtext.sML.Interstice;
import xtext.sML.SMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Architecture</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.sML.impl.ArchitectureImpl#getInput <em>Input</em>}</li>
 *   <li>{@link xtext.sML.impl.ArchitectureImpl#getFe <em>Fe</em>}</li>
 *   <li>{@link xtext.sML.impl.ArchitectureImpl#getInter <em>Inter</em>}</li>
 *   <li>{@link xtext.sML.impl.ArchitectureImpl#getClass_ <em>Class</em>}</li>
 *   <li>{@link xtext.sML.impl.ArchitectureImpl#getOutput <em>Output</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArchitectureImpl extends MinimalEObjectImpl.Container implements Architecture
{
  /**
   * The default value of the '{@link #getInput() <em>Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected static final String INPUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected String input = INPUT_EDEFAULT;

  /**
   * The cached value of the '{@link #getFe() <em>Fe</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFe()
   * @generated
   * @ordered
   */
  protected EList<FeatureExtraction> fe;

  /**
   * The cached value of the '{@link #getInter() <em>Inter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInter()
   * @generated
   * @ordered
   */
  protected Interstice inter;

  /**
   * The cached value of the '{@link #getClass_() <em>Class</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClass_()
   * @generated
   * @ordered
   */
  protected EList<Classification> class_;

  /**
   * The default value of the '{@link #getOutput() <em>Output</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected static final String OUTPUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected String output = OUTPUT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArchitectureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SMLPackage.Literals.ARCHITECTURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInput()
  {
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInput(String newInput)
  {
    String oldInput = input;
    input = newInput;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.ARCHITECTURE__INPUT, oldInput, input));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FeatureExtraction> getFe()
  {
    if (fe == null)
    {
      fe = new EObjectContainmentEList<FeatureExtraction>(FeatureExtraction.class, this, SMLPackage.ARCHITECTURE__FE);
    }
    return fe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interstice getInter()
  {
    return inter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInter(Interstice newInter, NotificationChain msgs)
  {
    Interstice oldInter = inter;
    inter = newInter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SMLPackage.ARCHITECTURE__INTER, oldInter, newInter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInter(Interstice newInter)
  {
    if (newInter != inter)
    {
      NotificationChain msgs = null;
      if (inter != null)
        msgs = ((InternalEObject)inter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SMLPackage.ARCHITECTURE__INTER, null, msgs);
      if (newInter != null)
        msgs = ((InternalEObject)newInter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SMLPackage.ARCHITECTURE__INTER, null, msgs);
      msgs = basicSetInter(newInter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.ARCHITECTURE__INTER, newInter, newInter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Classification> getClass_()
  {
    if (class_ == null)
    {
      class_ = new EObjectContainmentEList<Classification>(Classification.class, this, SMLPackage.ARCHITECTURE__CLASS);
    }
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOutput()
  {
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutput(String newOutput)
  {
    String oldOutput = output;
    output = newOutput;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.ARCHITECTURE__OUTPUT, oldOutput, output));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SMLPackage.ARCHITECTURE__FE:
        return ((InternalEList<?>)getFe()).basicRemove(otherEnd, msgs);
      case SMLPackage.ARCHITECTURE__INTER:
        return basicSetInter(null, msgs);
      case SMLPackage.ARCHITECTURE__CLASS:
        return ((InternalEList<?>)getClass_()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SMLPackage.ARCHITECTURE__INPUT:
        return getInput();
      case SMLPackage.ARCHITECTURE__FE:
        return getFe();
      case SMLPackage.ARCHITECTURE__INTER:
        return getInter();
      case SMLPackage.ARCHITECTURE__CLASS:
        return getClass_();
      case SMLPackage.ARCHITECTURE__OUTPUT:
        return getOutput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SMLPackage.ARCHITECTURE__INPUT:
        setInput((String)newValue);
        return;
      case SMLPackage.ARCHITECTURE__FE:
        getFe().clear();
        getFe().addAll((Collection<? extends FeatureExtraction>)newValue);
        return;
      case SMLPackage.ARCHITECTURE__INTER:
        setInter((Interstice)newValue);
        return;
      case SMLPackage.ARCHITECTURE__CLASS:
        getClass_().clear();
        getClass_().addAll((Collection<? extends Classification>)newValue);
        return;
      case SMLPackage.ARCHITECTURE__OUTPUT:
        setOutput((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.ARCHITECTURE__INPUT:
        setInput(INPUT_EDEFAULT);
        return;
      case SMLPackage.ARCHITECTURE__FE:
        getFe().clear();
        return;
      case SMLPackage.ARCHITECTURE__INTER:
        setInter((Interstice)null);
        return;
      case SMLPackage.ARCHITECTURE__CLASS:
        getClass_().clear();
        return;
      case SMLPackage.ARCHITECTURE__OUTPUT:
        setOutput(OUTPUT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.ARCHITECTURE__INPUT:
        return INPUT_EDEFAULT == null ? input != null : !INPUT_EDEFAULT.equals(input);
      case SMLPackage.ARCHITECTURE__FE:
        return fe != null && !fe.isEmpty();
      case SMLPackage.ARCHITECTURE__INTER:
        return inter != null;
      case SMLPackage.ARCHITECTURE__CLASS:
        return class_ != null && !class_.isEmpty();
      case SMLPackage.ARCHITECTURE__OUTPUT:
        return OUTPUT_EDEFAULT == null ? output != null : !OUTPUT_EDEFAULT.equals(output);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (input: ");
    result.append(input);
    result.append(", output: ");
    result.append(output);
    result.append(')');
    return result.toString();
  }

} //ArchitectureImpl
