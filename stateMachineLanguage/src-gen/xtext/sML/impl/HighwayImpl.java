/**
 * generated by Xtext 2.25.0
 */
package xtext.sML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.sML.Convolution;
import xtext.sML.Highway;
import xtext.sML.LeftNonRecursive;
import xtext.sML.SMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Highway</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.sML.impl.HighwayImpl#getDb <em>Db</em>}</li>
 *   <li>{@link xtext.sML.impl.HighwayImpl#getLeftNonRec <em>Left Non Rec</em>}</li>
 *   <li>{@link xtext.sML.impl.HighwayImpl#getConv <em>Conv</em>}</li>
 *   <li>{@link xtext.sML.impl.HighwayImpl#getFm <em>Fm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HighwayImpl extends MinimalEObjectImpl.Container implements Highway
{
  /**
   * The cached value of the '{@link #getDb() <em>Db</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDb()
   * @generated
   * @ordered
   */
  protected EList<String> db;

  /**
   * The cached value of the '{@link #getLeftNonRec() <em>Left Non Rec</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftNonRec()
   * @generated
   * @ordered
   */
  protected EList<LeftNonRecursive> leftNonRec;

  /**
   * The cached value of the '{@link #getConv() <em>Conv</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConv()
   * @generated
   * @ordered
   */
  protected EList<Convolution> conv;

  /**
   * The cached value of the '{@link #getFm() <em>Fm</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFm()
   * @generated
   * @ordered
   */
  protected EList<String> fm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HighwayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SMLPackage.Literals.HIGHWAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDb()
  {
    if (db == null)
    {
      db = new EDataTypeEList<String>(String.class, this, SMLPackage.HIGHWAY__DB);
    }
    return db;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LeftNonRecursive> getLeftNonRec()
  {
    if (leftNonRec == null)
    {
      leftNonRec = new EObjectContainmentEList<LeftNonRecursive>(LeftNonRecursive.class, this, SMLPackage.HIGHWAY__LEFT_NON_REC);
    }
    return leftNonRec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Convolution> getConv()
  {
    if (conv == null)
    {
      conv = new EObjectContainmentEList<Convolution>(Convolution.class, this, SMLPackage.HIGHWAY__CONV);
    }
    return conv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getFm()
  {
    if (fm == null)
    {
      fm = new EDataTypeEList<String>(String.class, this, SMLPackage.HIGHWAY__FM);
    }
    return fm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SMLPackage.HIGHWAY__LEFT_NON_REC:
        return ((InternalEList<?>)getLeftNonRec()).basicRemove(otherEnd, msgs);
      case SMLPackage.HIGHWAY__CONV:
        return ((InternalEList<?>)getConv()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SMLPackage.HIGHWAY__DB:
        return getDb();
      case SMLPackage.HIGHWAY__LEFT_NON_REC:
        return getLeftNonRec();
      case SMLPackage.HIGHWAY__CONV:
        return getConv();
      case SMLPackage.HIGHWAY__FM:
        return getFm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SMLPackage.HIGHWAY__DB:
        getDb().clear();
        getDb().addAll((Collection<? extends String>)newValue);
        return;
      case SMLPackage.HIGHWAY__LEFT_NON_REC:
        getLeftNonRec().clear();
        getLeftNonRec().addAll((Collection<? extends LeftNonRecursive>)newValue);
        return;
      case SMLPackage.HIGHWAY__CONV:
        getConv().clear();
        getConv().addAll((Collection<? extends Convolution>)newValue);
        return;
      case SMLPackage.HIGHWAY__FM:
        getFm().clear();
        getFm().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.HIGHWAY__DB:
        getDb().clear();
        return;
      case SMLPackage.HIGHWAY__LEFT_NON_REC:
        getLeftNonRec().clear();
        return;
      case SMLPackage.HIGHWAY__CONV:
        getConv().clear();
        return;
      case SMLPackage.HIGHWAY__FM:
        getFm().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.HIGHWAY__DB:
        return db != null && !db.isEmpty();
      case SMLPackage.HIGHWAY__LEFT_NON_REC:
        return leftNonRec != null && !leftNonRec.isEmpty();
      case SMLPackage.HIGHWAY__CONV:
        return conv != null && !conv.isEmpty();
      case SMLPackage.HIGHWAY__FM:
        return fm != null && !fm.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (db: ");
    result.append(db);
    result.append(", fm: ");
    result.append(fm);
    result.append(')');
    return result.toString();
  }

} //HighwayImpl
