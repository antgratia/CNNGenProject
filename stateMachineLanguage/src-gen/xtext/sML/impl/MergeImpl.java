/**
 * generated by Xtext 2.25.0
 */
package xtext.sML.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.sML.Merge;
import xtext.sML.MergeNonRecu;
import xtext.sML.MergeRecu;
import xtext.sML.SMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Merge</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.sML.impl.MergeImpl#getMnr <em>Mnr</em>}</li>
 *   <li>{@link xtext.sML.impl.MergeImpl#getMr <em>Mr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MergeImpl extends MinimalEObjectImpl.Container implements Merge
{
  /**
   * The cached value of the '{@link #getMnr() <em>Mnr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMnr()
   * @generated
   * @ordered
   */
  protected MergeNonRecu mnr;

  /**
   * The cached value of the '{@link #getMr() <em>Mr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMr()
   * @generated
   * @ordered
   */
  protected MergeRecu mr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MergeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SMLPackage.Literals.MERGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeNonRecu getMnr()
  {
    return mnr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMnr(MergeNonRecu newMnr, NotificationChain msgs)
  {
    MergeNonRecu oldMnr = mnr;
    mnr = newMnr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SMLPackage.MERGE__MNR, oldMnr, newMnr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMnr(MergeNonRecu newMnr)
  {
    if (newMnr != mnr)
    {
      NotificationChain msgs = null;
      if (mnr != null)
        msgs = ((InternalEObject)mnr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SMLPackage.MERGE__MNR, null, msgs);
      if (newMnr != null)
        msgs = ((InternalEObject)newMnr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SMLPackage.MERGE__MNR, null, msgs);
      msgs = basicSetMnr(newMnr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.MERGE__MNR, newMnr, newMnr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeRecu getMr()
  {
    return mr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMr(MergeRecu newMr, NotificationChain msgs)
  {
    MergeRecu oldMr = mr;
    mr = newMr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SMLPackage.MERGE__MR, oldMr, newMr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMr(MergeRecu newMr)
  {
    if (newMr != mr)
    {
      NotificationChain msgs = null;
      if (mr != null)
        msgs = ((InternalEObject)mr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SMLPackage.MERGE__MR, null, msgs);
      if (newMr != null)
        msgs = ((InternalEObject)newMr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SMLPackage.MERGE__MR, null, msgs);
      msgs = basicSetMr(newMr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SMLPackage.MERGE__MR, newMr, newMr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SMLPackage.MERGE__MNR:
        return basicSetMnr(null, msgs);
      case SMLPackage.MERGE__MR:
        return basicSetMr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SMLPackage.MERGE__MNR:
        return getMnr();
      case SMLPackage.MERGE__MR:
        return getMr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SMLPackage.MERGE__MNR:
        setMnr((MergeNonRecu)newValue);
        return;
      case SMLPackage.MERGE__MR:
        setMr((MergeRecu)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.MERGE__MNR:
        setMnr((MergeNonRecu)null);
        return;
      case SMLPackage.MERGE__MR:
        setMr((MergeRecu)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SMLPackage.MERGE__MNR:
        return mnr != null;
      case SMLPackage.MERGE__MR:
        return mr != null;
    }
    return super.eIsSet(featureID);
  }

} //MergeImpl
