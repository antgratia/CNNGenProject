/*
 * generated by Xtext 2.26.0
 */
grammar InternalSML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.SMLGrammarAccess;

}

@parser::members {

 	private SMLGrammarAccess grammarAccess;

    public InternalSMLParser(TokenStream input, SMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SML";
   	}

   	@Override
   	protected SMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSML
entryRuleSML returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSMLRule()); }
	iv_ruleSML=ruleSML
	{ $current=$iv_ruleSML.current; }
	EOF;

// Rule SML
ruleSML returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSMLAccess().getSmlArchitectureParserRuleCall_0());
			}
			lv_sml_0_0=ruleArchitecture
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSMLRule());
				}
				set(
					$current,
					"sml",
					lv_sml_0_0,
					"xtext.SML.Architecture");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleArchitecture
entryRuleArchitecture returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArchitectureRule()); }
	iv_ruleArchitecture=ruleArchitecture
	{ $current=$iv_ruleArchitecture.current; }
	EOF;

// Rule Architecture
ruleArchitecture returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_input_0_0='input'
				{
					newLeafNode(lv_input_0_0, grammarAccess.getArchitectureAccess().getInputInputKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArchitectureRule());
					}
					setWithLastConsumed($current, "input", lv_input_0_0, "input");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArchitectureAccess().getFeFeatureExtractionParserRuleCall_1_0());
				}
				lv_fe_1_0=ruleFeatureExtraction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArchitectureRule());
					}
					add(
						$current,
						"fe",
						lv_fe_1_0,
						"xtext.SML.FeatureExtraction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArchitectureAccess().getInterIntersticeParserRuleCall_2_0_0());
					}
					lv_inter_2_0=ruleInterstice
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArchitectureRule());
						}
						set(
							$current,
							"inter",
							lv_inter_2_0,
							"xtext.SML.Interstice");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArchitectureAccess().getClassClassificationParserRuleCall_2_1_0());
					}
					lv_class_3_0=ruleClassification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArchitectureRule());
						}
						add(
							$current,
							"class",
							lv_class_3_0,
							"xtext.SML.Classification");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			(
				lv_output_4_0='output'
				{
					newLeafNode(lv_output_4_0, grammarAccess.getArchitectureAccess().getOutputOutputKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArchitectureRule());
					}
					setWithLastConsumed($current, "output", lv_output_4_0, "output");
				}
			)
		)
	)
;

// Entry rule entryRuleDropout
entryRuleDropout returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDropoutRule()); }
	iv_ruleDropout=ruleDropout
	{ $current=$iv_ruleDropout.current.getText(); }
	EOF;

// Rule Dropout
ruleDropout returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='dropout'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDropoutAccess().getDropoutKeyword());
	}
;

// Entry rule entryRulePooling
entryRulePooling returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPoolingRule()); }
	iv_rulePooling=rulePooling
	{ $current=$iv_rulePooling.current.getText(); }
	EOF;

// Rule Pooling
rulePooling returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='avg_pooling'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPoolingAccess().getAvg_poolingKeyword_0());
		}
		    |
		kw='max_pooling'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPoolingAccess().getMax_poolingKeyword_1());
		}
	)
;

// Entry rule entryRuleConvolution
entryRuleConvolution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConvolutionRule()); }
	iv_ruleConvolution=ruleConvolution
	{ $current=$iv_ruleConvolution.current; }
	EOF;

// Rule Convolution
ruleConvolution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_bnconv_0_0='bnconv'
				{
					newLeafNode(lv_bnconv_0_0, grammarAccess.getConvolutionAccess().getBnconvBnconvKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConvolutionRule());
					}
					setWithLastConsumed($current, "bnconv", lv_bnconv_0_0, "bnconv");
				}
			)
		)
		    |
		(
			(
				lv_convbn_1_0='convbn'
				{
					newLeafNode(lv_convbn_1_0, grammarAccess.getConvolutionAccess().getConvbnConvbnKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConvolutionRule());
					}
					setWithLastConsumed($current, "convbn", lv_convbn_1_0, "convbn");
				}
			)
		)
		    |
		(
			(
				lv_conv_2_0='conv'
				{
					newLeafNode(lv_conv_2_0, grammarAccess.getConvolutionAccess().getConvConvKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConvolutionRule());
					}
					setWithLastConsumed($current, "conv", lv_conv_2_0, "conv");
				}
			)
		)
		    |
		(
			(
				lv_upconv_3_0='upconv'
				{
					newLeafNode(lv_upconv_3_0, grammarAccess.getConvolutionAccess().getUpconvUpconvKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConvolutionRule());
					}
					setWithLastConsumed($current, "upconv", lv_upconv_3_0, "upconv");
				}
			)
		)
	)
;

// Entry rule entryRuleGlobalPooling
entryRuleGlobalPooling returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGlobalPoolingRule()); }
	iv_ruleGlobalPooling=ruleGlobalPooling
	{ $current=$iv_ruleGlobalPooling.current.getText(); }
	EOF;

// Rule GlobalPooling
ruleGlobalPooling returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='global_avg_pooling'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGlobalPoolingAccess().getGlobal_avg_poolingKeyword_0());
		}
		    |
		kw='global_max_pooling'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGlobalPoolingAccess().getGlobal_max_poolingKeyword_1());
		}
	)
;

// Entry rule entryRuleFlattenOrGlobal
entryRuleFlattenOrGlobal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlattenOrGlobalRule()); }
	iv_ruleFlattenOrGlobal=ruleFlattenOrGlobal
	{ $current=$iv_ruleFlattenOrGlobal.current; }
	EOF;

// Rule FlattenOrGlobal
ruleFlattenOrGlobal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_flat_0_0='flatten'
				{
					newLeafNode(lv_flat_0_0, grammarAccess.getFlattenOrGlobalAccess().getFlatFlattenKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlattenOrGlobalRule());
					}
					setWithLastConsumed($current, "flat", lv_flat_0_0, "flatten");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFlattenOrGlobalAccess().getGpGlobalPoolingParserRuleCall_1_0());
				}
				lv_gp_1_0=ruleGlobalPooling
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlattenOrGlobalRule());
					}
					set(
						$current,
						"gp",
						lv_gp_1_0,
						"xtext.SML.GlobalPooling");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInterstice
entryRuleInterstice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntersticeRule()); }
	iv_ruleInterstice=ruleInterstice
	{ $current=$iv_ruleInterstice.current; }
	EOF;

// Rule Interstice
ruleInterstice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIntersticeAccess().getFgFlattenOrGlobalParserRuleCall_0());
			}
			lv_fg_0_0=ruleFlattenOrGlobal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIntersticeRule());
				}
				set(
					$current,
					"fg",
					lv_fg_0_0,
					"xtext.SML.FlattenOrGlobal");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleClassification
entryRuleClassification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassificationRule()); }
	iv_ruleClassification=ruleClassification
	{ $current=$iv_ruleClassification.current; }
	EOF;

// Rule Classification
ruleClassification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassificationAccess().getDropDropoutParserRuleCall_0_0());
				}
				lv_drop_0_0=ruleDropout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassificationRule());
					}
					set(
						$current,
						"drop",
						lv_drop_0_0,
						"xtext.SML.Dropout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_d_1_0='dense'
				{
					newLeafNode(lv_d_1_0, grammarAccess.getClassificationAccess().getDDenseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassificationRule());
					}
					setWithLastConsumed($current, "d", lv_d_1_0, "dense");
				}
			)
		)
	)
;

// Entry rule entryRuleConvDrop
entryRuleConvDrop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConvDropRule()); }
	iv_ruleConvDrop=ruleConvDrop
	{ $current=$iv_ruleConvDrop.current; }
	EOF;

// Rule ConvDrop
ruleConvDrop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConvDropAccess().getConvConvolutionParserRuleCall_0_0());
				}
				lv_conv_0_0=ruleConvolution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvDropRule());
					}
					set(
						$current,
						"conv",
						lv_conv_0_0,
						"xtext.SML.Convolution");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConvDropAccess().getDropDropoutParserRuleCall_1_0());
				}
				lv_drop_1_0=ruleDropout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvDropRule());
					}
					set(
						$current,
						"drop",
						lv_drop_1_0,
						"xtext.SML.Dropout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMergeConv
entryRuleMergeConv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMergeConvRule()); }
	iv_ruleMergeConv=ruleMergeConv
	{ $current=$iv_ruleMergeConv.current; }
	EOF;

// Rule MergeConv
ruleMergeConv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeConvAccess().getMergeMergeParserRuleCall_0_0());
				}
				lv_merge_0_0=ruleMerge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeConvRule());
					}
					set(
						$current,
						"merge",
						lv_merge_0_0,
						"xtext.SML.Merge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeConvAccess().getConvdropConvDropParserRuleCall_1_0());
				}
				lv_convdrop_1_0=ruleConvDrop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeConvRule());
					}
					add(
						$current,
						"convdrop",
						lv_convdrop_1_0,
						"xtext.SML.ConvDrop");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConvOrMerge
entryRuleConvOrMerge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConvOrMergeRule()); }
	iv_ruleConvOrMerge=ruleConvOrMerge
	{ $current=$iv_ruleConvOrMerge.current; }
	EOF;

// Rule ConvOrMerge
ruleConvOrMerge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_0_0());
				}
				lv_convdrop_0_0=ruleConvDrop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvOrMergeRule());
					}
					add(
						$current,
						"convdrop",
						lv_convdrop_0_0,
						"xtext.SML.ConvDrop");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConvOrMergeAccess().getConvdropConvDropParserRuleCall_1_0_0());
					}
					lv_convdrop_1_0=ruleConvDrop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConvOrMergeRule());
						}
						add(
							$current,
							"convdrop",
							lv_convdrop_1_0,
							"xtext.SML.ConvDrop");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getConvOrMergeAccess().getMergeConvMergeConvParserRuleCall_1_1_0());
					}
					lv_mergeConv_2_0=ruleMergeConv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConvOrMergeRule());
						}
						add(
							$current,
							"mergeConv",
							lv_mergeConv_2_0,
							"xtext.SML.MergeConv");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getPPoolingParserRuleCall_0_0());
				}
				lv_p_0_0=rulePooling
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"p",
						lv_p_0_0,
						"xtext.SML.Pooling");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getComConvOrMergeParserRuleCall_1_0());
				}
				lv_com_1_0=ruleConvOrMerge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"com",
						lv_com_1_0,
						"xtext.SML.ConvOrMerge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getPoolPoolingParserRuleCall_2_0());
				}
				lv_pool_2_0=rulePooling
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"pool",
						lv_pool_2_0,
						"xtext.SML.Pooling");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRightAccess().getConvConvolutionParserRuleCall_0_0());
				}
				lv_conv_0_0=ruleConvolution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRightRule());
					}
					add(
						$current,
						"conv",
						lv_conv_0_0,
						"xtext.SML.Convolution");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRightAccess().getRightAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_empty_2_0='Empty'
					{
						newLeafNode(lv_empty_2_0, grammarAccess.getRightAccess().getEmptyEmptyKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRightRule());
						}
						setWithLastConsumed($current, "empty", lv_empty_2_0, "Empty");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMergeBody
entryRuleMergeBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMergeBodyRule()); }
	iv_ruleMergeBody=ruleMergeBody
	{ $current=$iv_ruleMergeBody.current; }
	EOF;

// Rule MergeBody
ruleMergeBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMergeBodyAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeBodyAccess().getLeftLeftParserRuleCall_1_0());
				}
				lv_left_1_0=ruleLeft
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeBodyRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"xtext.SML.Left");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_virg_2_0=','
				{
					newLeafNode(lv_virg_2_0, grammarAccess.getMergeBodyAccess().getVirgCommaKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMergeBodyRule());
					}
					setWithLastConsumed($current, "virg", lv_virg_2_0, ",");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeBodyAccess().getRightRightParserRuleCall_3_0());
				}
				lv_right_3_0=ruleRight
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeBodyRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"xtext.SML.Right");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMergeBodyAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleMerge
entryRuleMerge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMergeRule()); }
	iv_ruleMerge=ruleMerge
	{ $current=$iv_ruleMerge.current; }
	EOF;

// Rule Merge
ruleMerge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_db_0_0='['
				{
					newLeafNode(lv_db_0_0, grammarAccess.getMergeAccess().getDbLeftSquareBracketKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMergeRule());
					}
					setWithLastConsumed($current, "db", lv_db_0_0, "[");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeAccess().getMergeBodyMergeBodyParserRuleCall_1_0());
				}
				lv_mergeBody_1_0=ruleMergeBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeRule());
					}
					add(
						$current,
						"mergeBody",
						lv_mergeBody_1_0,
						"xtext.SML.MergeBody");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				lv_fm_2_0=']'
				{
					newLeafNode(lv_fm_2_0, grammarAccess.getMergeAccess().getFmRightSquareBracketKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMergeRule());
					}
					setWithLastConsumed($current, "fm", lv_fm_2_0, "]");
				}
			)
		)
	)
;

// Entry rule entryRuleFeatureExtraction
entryRuleFeatureExtraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureExtractionRule()); }
	iv_ruleFeatureExtraction=ruleFeatureExtraction
	{ $current=$iv_ruleFeatureExtraction.current; }
	EOF;

// Rule FeatureExtraction
ruleFeatureExtraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureExtractionAccess().getConvConvolutionParserRuleCall_0_0_0());
					}
					lv_conv_0_0=ruleConvolution
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureExtractionRule());
						}
						set(
							$current,
							"conv",
							lv_conv_0_0,
							"xtext.SML.Convolution");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureExtractionAccess().getMergeMergeParserRuleCall_0_1_0());
					}
					lv_merge_1_0=ruleMerge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureExtractionRule());
						}
						set(
							$current,
							"merge",
							lv_merge_1_0,
							"xtext.SML.Merge");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureExtractionAccess().getDropDropoutParserRuleCall_1_0());
				}
				lv_drop_2_0=ruleDropout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureExtractionRule());
					}
					set(
						$current,
						"drop",
						lv_drop_2_0,
						"xtext.SML.Dropout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureExtractionAccess().getPoolPoolingParserRuleCall_2_0());
				}
				lv_pool_3_0=rulePooling
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureExtractionRule());
					}
					set(
						$current,
						"pool",
						lv_pool_3_0,
						"xtext.SML.Pooling");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
